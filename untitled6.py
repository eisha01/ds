# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lRJg78qoXRm2Zp3hasPyihzhTFlRPaah
"""

import time
import threading
from collections import deque
order=["pizza","samosa","pasta","biryani","burger"]
class Queue:
    def __init__(self):
        self.buffer = deque()
    def enqueue(self,val):
        self.buffer.appendleft(val)
    def dequeue(self):
        if len(self.buffer)==0: 
            print("queue is empty")
            return 
        return self.buffer.pop()
    def is_empty(self): 
        return len(self.buffer)==0
    def size(self):
        return len(self.buffer)
    def front(self):
        return self.buffer[-1]

    def place_order(self):
        global order
        for x in order:
            self.enqueue(x)
            print(f"\n your order {x}has been placed in the queue..")
            time.sleep(0.5)
    def serve_order(self):
        while self.is_empty() == False:
            for x in range(0,7):
                l = self.dequeue()
                print(f"\your order {l}  has been served from the queue.")
                time.sleep(2.0)
q = Queue()

worker1 = threading.Thread(target=q.place_order) 
worker2 = threading.Thread(target=q.serve_order) 

worker1.start()
time.sleep(1.0)
worker2.start()
worker1.join() 
worker2.join() 
print("bye")